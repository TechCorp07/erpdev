# Generated by Django 5.1.2 on 2025-06-07 11:40

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location_code', models.CharField(max_length=20, unique=True)),
                ('location_type', models.CharField(choices=[('warehouse', 'Warehouse'), ('shop_floor', 'Shop Floor'), ('display', 'Display Area'), ('storage', 'Storage Room'), ('consignment', 'Customer Consignment'), ('repair', 'Repair Center')], max_length=20)),
                ('address', models.TextField(blank=True)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_sellable', models.BooleanField(default=True, help_text='Can products be sold from this location?')),
                ('is_default', models.BooleanField(default=False, help_text='Default location for new stock receipts')),
                ('max_capacity', models.PositiveIntegerField(blank=True, help_text='Maximum number of items this location can hold', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=110, unique=True)),
                ('description', models.TextField(blank=True)),
                ('default_markup_percentage', models.DecimalField(decimal_places=2, default=Decimal('30.00'), help_text='Default profit margin for products in this category', max_digits=5)),
                ('default_reorder_level', models.PositiveIntegerField(default=10, help_text='Default minimum stock level for products in this category')),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='inventory.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('sku', models.CharField(max_length=50, unique=True)),
                ('barcode', models.CharField(blank=True, max_length=100, unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(blank=True, max_length=500)),
                ('product_type', models.CharField(choices=[('physical', 'Physical Product'), ('digital', 'Digital Product'), ('service', 'Service'), ('bundle', 'Product Bundle')], default='physical', max_length=20)),
                ('brand', models.CharField(blank=True, max_length=100)),
                ('model_number', models.CharField(blank=True, max_length=100)),
                ('manufacturer_part_number', models.CharField(blank=True, max_length=100)),
                ('weight', models.DecimalField(blank=True, decimal_places=3, help_text='Weight in kilograms', max_digits=8, null=True)),
                ('dimensions', models.CharField(blank=True, help_text='L x W x H in centimeters', max_length=100)),
                ('cost_price', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('selling_price', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('current_stock', models.IntegerField(default=0)),
                ('reserved_stock', models.IntegerField(default=0, help_text='Stock reserved for pending orders')),
                ('available_stock', models.IntegerField(default=0, help_text='Stock available for sale (current - reserved)')),
                ('reorder_level', models.PositiveIntegerField(default=10, help_text='Minimum stock level before reordering')),
                ('reorder_quantity', models.PositiveIntegerField(default=50, help_text='Quantity to order when restocking')),
                ('max_stock_level', models.PositiveIntegerField(default=1000, help_text='Maximum stock level to maintain')),
                ('supplier_sku', models.CharField(blank=True, max_length=100)),
                ('supplier_lead_time_days', models.PositiveIntegerField(default=30)),
                ('minimum_order_quantity', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('is_serialized', models.BooleanField(default=False, help_text='Track individual serial numbers for this product')),
                ('is_perishable', models.BooleanField(default=False, help_text='Product has expiration date')),
                ('requires_quality_check', models.BooleanField(default=False, help_text='Requires quality inspection before sale')),
                ('total_sold', models.PositiveIntegerField(default=0, help_text='Total quantity sold to date')),
                ('total_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total revenue generated from this product', max_digits=15)),
                ('last_sold_date', models.DateTimeField(blank=True, null=True)),
                ('last_restocked_date', models.DateTimeField(blank=True, null=True)),
                ('meta_title', models.CharField(blank=True, max_length=200)),
                ('meta_description', models.CharField(blank=True, max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_quotable', models.BooleanField(default=True, help_text='Can this product be included in quotes?')),
                ('quote_description', models.TextField(blank=True, help_text='Description to use in quotes (if different from main description)')),
                ('minimum_quote_quantity', models.IntegerField(default=1, help_text='Minimum quantity for quotes')),
                ('bulk_discount_threshold', models.IntegerField(default=10, help_text='Quantity threshold for bulk pricing')),
                ('bulk_discount_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Discount percentage for bulk orders', max_digits=5)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='inventory.category')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('po_number', models.CharField(max_length=50, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sent', 'Sent to Supplier'), ('acknowledged', 'Acknowledged by Supplier'), ('partially_received', 'Partially Received'), ('received', 'Fully Received'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('expected_delivery_date', models.DateField()),
                ('actual_delivery_date', models.DateField(blank=True, null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('delivery_instructions', models.TextField(blank=True)),
                ('payment_terms', models.CharField(max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('delivery_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.location')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockTake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('scheduled_date', models.DateTimeField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('items_counted', models.PositiveIntegerField(default=0)),
                ('variances_found', models.PositiveIntegerField(default=0)),
                ('total_adjustment_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('notes', models.TextField(blank=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_stock_takes', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, help_text='Leave blank for full inventory count', null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.location')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('supplier_code', models.CharField(max_length=20, unique=True)),
                ('supplier_type', models.CharField(choices=[('manufacturer', 'Manufacturer'), ('distributor', 'Distributor'), ('wholesaler', 'Wholesaler'), ('local_retailer', 'Local Retailer'), ('import_agent', 'Import Agent')], max_length=20)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('website', models.URLField(blank=True)),
                ('address_line_1', models.CharField(max_length=200)),
                ('address_line_2', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('state_province', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(default='Zimbabwe', max_length=100)),
                ('payment_terms', models.CharField(default='30 days', help_text="e.g., '30 days', 'Net 15', 'COD', etc.", max_length=100)),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('ZWG', 'Zimbabwe Gold'), ('ZAR', 'South African Rand'), ('EUR', 'Euro'), ('GBP', 'British Pound')], default='USD', max_length=3)),
                ('minimum_order_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('average_lead_time_days', models.PositiveIntegerField(default=30, help_text='Average delivery time in days')),
                ('reliability_rating', models.DecimalField(decimal_places=2, default=Decimal('5.00'), help_text='Reliability rating from 1-10', max_digits=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('tax_number', models.CharField(blank=True, max_length=50)),
                ('requires_purchase_order', models.BooleanField(default=True, help_text='Whether this supplier requires formal POs')),
                ('is_active', models.BooleanField(default=True)),
                ('is_preferred', models.BooleanField(default=False, help_text='Mark as preferred supplier for priority in sourcing')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ReorderAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('critical', 'Critical')], max_length=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('ordered', 'Purchase Order Created'), ('resolved', 'Resolved'), ('ignored', 'Ignored')], default='active', max_length=15)),
                ('current_stock', models.IntegerField()),
                ('reorder_level', models.IntegerField()),
                ('suggested_order_quantity', models.IntegerField()),
                ('estimated_stockout_date', models.DateField(blank=True, null=True)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reorder_alerts', to='inventory.product')),
                ('purchase_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.purchaseorder')),
                ('suggested_supplier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.supplier')),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.supplier'),
        ),
        migrations.AddField(
            model_name='product',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='inventory.supplier'),
        ),
        migrations.CreateModel(
            name='PurchaseOrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_ordered', models.PositiveIntegerField()),
                ('quantity_received', models.PositiveIntegerField(default=0)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('expected_delivery_date', models.DateField(blank=True, null=True)),
                ('actual_delivery_date', models.DateField(blank=True, null=True)),
                ('quality_check_passed', models.BooleanField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.product')),
                ('purchase_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.purchaseorder')),
            ],
            options={
                'unique_together': {('purchase_order', 'product')},
            },
        ),
        migrations.CreateModel(
            name='StockLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=0)),
                ('reserved_quantity', models.IntegerField(default=0)),
                ('last_counted', models.DateTimeField(blank=True, null=True)),
                ('last_movement', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_levels', to='inventory.location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_levels', to='inventory.product')),
            ],
            options={
                'ordering': ['product__name', 'location__name'],
                'unique_together': {('product', 'location')},
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_type', models.CharField(choices=[('in', 'Stock In'), ('out', 'Stock Out'), ('adjustment', 'Stock Adjustment'), ('transfer', 'Location Transfer'), ('sale', 'Sale'), ('purchase', 'Purchase'), ('return', 'Return'), ('damaged', 'Damaged Stock'), ('expired', 'Expired Stock'), ('sample', 'Sample/Demo')], max_length=20)),
                ('quantity', models.IntegerField()),
                ('previous_stock', models.IntegerField()),
                ('new_stock', models.IntegerField()),
                ('reference', models.CharField(help_text='Reference number (PO, Invoice, Transfer, etc.)', max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('from_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements_from', to='inventory.location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='inventory.product')),
                ('to_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements_to', to='inventory.location')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['product', '-created_at'], name='inventory_s_product_cfb4fb_idx'), models.Index(fields=['movement_type', '-created_at'], name='inventory_s_movemen_a71f62_idx'), models.Index(fields=['reference'], name='inventory_s_referen_16defd_idx')],
            },
        ),
        migrations.CreateModel(
            name='StockTakeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_quantity', models.IntegerField()),
                ('counted_quantity', models.IntegerField()),
                ('variance', models.IntegerField()),
                ('variance_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('counted_at', models.DateTimeField(auto_now_add=True)),
                ('counted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.product')),
                ('stock_take', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.stocktake')),
            ],
            options={
                'unique_together': {('stock_take', 'product', 'location')},
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='inventory_p_sku_f85905_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['barcode'], name='inventory_p_barcode_3a77e5_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'is_active'], name='inventory_p_categor_471092_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['supplier', 'is_active'], name='inventory_p_supplie_23b4c3_idx'),
        ),
    ]
