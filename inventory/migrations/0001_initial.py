# Generated by Django 5.1.2 on 2025-08-28 14:15

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ComponentFamily',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=110, unique=True)),
                ('description', models.TextField(blank=True)),
                ('default_attributes', models.JSONField(blank=True, default=dict, help_text='Default attribute values for new products in this family')),
                ('typical_markup_percentage', models.DecimalField(decimal_places=2, default=Decimal('40.00'), help_text='Typical markup for this component family', max_digits=5)),
                ('default_bin_prefix', models.CharField(blank=True, help_text="Default storage bin prefix (e.g., 'RES' for resistors)", max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Component Families',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='ISO currency code (USD, EUR, CNY)', max_length=3, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('symbol', models.CharField(max_length=5)),
                ('exchange_rate_to_usd', models.DecimalField(decimal_places=6, default=Decimal('1.000000'), help_text='Exchange rate to USD (1 unit of this currency = X USD)', max_digits=15)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('auto_update_enabled', models.BooleanField(default=False, help_text='Enable automatic exchange rate updates')),
                ('api_source', models.CharField(blank=True, choices=[('manual', 'Manual Entry'), ('ecb', 'European Central Bank'), ('fed', 'Federal Reserve'), ('xe', 'XE.com')], default='manual', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Currencies',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location_code', models.CharField(max_length=20, unique=True)),
                ('location_type', models.CharField(choices=[('warehouse', 'Warehouse'), ('shop_floor', 'Shop Floor'), ('display', 'Display Area'), ('storage', 'Storage Room'), ('consignment', 'Customer Consignment'), ('repair', 'Repair Center')], max_length=20)),
                ('address', models.TextField(blank=True)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_sellable', models.BooleanField(default=True, help_text='Can products be sold from this location?')),
                ('is_default', models.BooleanField(default=False, help_text='Default location for new stock receipts')),
                ('max_capacity', models.PositiveIntegerField(blank=True, help_text='Maximum number of items this location can hold', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SupplierCountry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=3, unique=True)),
                ('region', models.CharField(max_length=50)),
                ('average_lead_time_days', models.PositiveIntegerField(default=30)),
                ('typical_shipping_cost_percentage', models.DecimalField(decimal_places=2, default=Decimal('10.00'), help_text='Typical shipping cost as % of order value', max_digits=5)),
                ('requires_import_permit', models.BooleanField(default=False)),
                ('average_customs_duty_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Average customs duty percentage', max_digits=5)),
                ('vat_percentage', models.DecimalField(decimal_places=2, default=Decimal('15.00'), help_text='VAT percentage in Zimbabwe', max_digits=5)),
                ('requires_coc', models.BooleanField(default=False, help_text='Requires Certificate of Conformity')),
                ('requires_sabs', models.BooleanField(default=False, help_text='Requires SABS certification')),
                ('preferred_shipping_methods', models.JSONField(default=list, help_text="Preferred shipping methods: ['air', 'sea', 'express']")),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Supplier Countries',
                'ordering': ['region', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=110, unique=True)),
                ('description', models.TextField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/')),
                ('default_markup_percentage', models.DecimalField(decimal_places=2, default=Decimal('30.00'), help_text='Default markup for this brand', max_digits=5)),
                ('quality_rating', models.PositiveSmallIntegerField(default=5, help_text='Quality rating (1-5 stars)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('warranty_period_months', models.PositiveIntegerField(default=12, help_text='Standard warranty period in months')),
                ('market_position', models.CharField(choices=[('budget', 'Budget/Generic'), ('mid_range', 'Mid Range'), ('premium', 'Premium'), ('professional', 'Professional Grade')], default='mid_range', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Brands',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=110, unique=True)),
                ('description', models.TextField(blank=True)),
                ('default_markup_percentage', models.DecimalField(decimal_places=2, default=Decimal('30.00'), help_text='Default profit margin for products in this category', max_digits=5)),
                ('default_reorder_level', models.PositiveIntegerField(default=10, help_text='Default minimum stock level for products in this category')),
                ('default_reorder_quantity', models.PositiveIntegerField(default=50, help_text='Default reorder quantity')),
                ('requires_datasheet', models.BooleanField(default=False, help_text='Products in this category typically need datasheets')),
                ('requires_certification', models.BooleanField(default=False, help_text='Products require certification (CE, FCC, SABS, etc.)')),
                ('requires_esd_protection', models.BooleanField(default=False, help_text='Products require ESD protection during handling')),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('show_in_menu', models.BooleanField(default=True)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('meta_keywords', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='inventory.category')),
                ('component_family', models.ForeignKey(blank=True, help_text='Electronics component family this category belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.componentfamily')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('sku', models.CharField(max_length=50, unique=True)),
                ('barcode', models.CharField(blank=True, max_length=100, unique=True)),
                ('qr_code', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField()),
                ('short_description', models.CharField(blank=True, max_length=500)),
                ('product_type', models.CharField(choices=[('component', 'Electronic Component'), ('module', 'Electronic Module'), ('board', 'Development Board'), ('kit', 'Kit/Bundle'), ('tool', 'Tool/Equipment'), ('cable', 'Cable/Connector'), ('consumable', 'Consumable'), ('other', 'Other')], default='component', max_length=20)),
                ('model_number', models.CharField(blank=True, max_length=100)),
                ('manufacturer_part_number', models.CharField(blank=True, max_length=100)),
                ('dynamic_attributes', models.JSONField(blank=True, default=dict, help_text='Dynamic component specifications (voltage, current, tolerance, etc.)')),
                ('datasheet_url', models.URLField(blank=True, help_text='Link to datasheet (Google Drive/Mega)')),
                ('product_images', models.JSONField(blank=True, default=list, help_text='List of image URLs for shopping cart')),
                ('additional_documents', models.JSONField(blank=True, default=list, help_text='Additional documents: certifications, test reports, etc.')),
                ('package_type', models.CharField(blank=True, help_text='Component package (DIP, SMD, TO-220, etc.)', max_length=50)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('dimensions', models.CharField(blank=True, help_text='L x W x H in mm', max_length=100)),
                ('volume_cubic_cm', models.DecimalField(blank=True, decimal_places=2, help_text='Volume for storage optimization', max_digits=10, null=True)),
                ('cost_price', models.DecimalField(decimal_places=6, help_text='Cost price in supplier currency', max_digits=15)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('shipping_cost_per_unit', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), help_text='Shipping cost per unit in USD', max_digits=10)),
                ('insurance_cost_per_unit', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), help_text='Insurance cost per unit in USD', max_digits=10)),
                ('customs_duty_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Customs duty percentage', max_digits=5)),
                ('vat_percentage', models.DecimalField(decimal_places=2, default=Decimal('15.00'), help_text='VAT percentage', max_digits=5)),
                ('other_fees_per_unit', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), help_text='Other fees (clearance, handling, etc.) per unit in USD', max_digits=10)),
                ('cost_price_usd', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), help_text='Cost price converted to USD', max_digits=15)),
                ('total_import_cost_usd', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), help_text='Total import cost per unit in USD', max_digits=15)),
                ('overhead_cost_per_unit', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), help_text='Allocated overhead cost per unit', max_digits=10)),
                ('total_cost_price_usd', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), help_text='Total cost including all expenses in USD', max_digits=15)),
                ('selling_price', models.DecimalField(decimal_places=2, help_text='Selling price in selling currency', max_digits=15)),
                ('markup_percentage', models.DecimalField(decimal_places=3, default=Decimal('0.000'), help_text='Calculated markup percentage', max_digits=8)),
                ('competitor_min_price', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum competitor price found', max_digits=15, null=True)),
                ('competitor_max_price', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum competitor price found', max_digits=15, null=True)),
                ('price_position', models.CharField(choices=[('below_market', 'Below Market'), ('competitive', 'Competitive'), ('premium', 'Premium'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('current_stock', models.IntegerField(default=0, help_text='Legacy alias of total_stock for views and analytics')),
                ('total_stock', models.IntegerField(default=0, help_text='Total stock across all locations')),
                ('reserved_stock', models.IntegerField(default=0, help_text='Stock reserved for pending orders')),
                ('available_stock', models.IntegerField(default=0, help_text='Stock available for sale (current - reserved)')),
                ('reorder_level', models.PositiveIntegerField(default=10, help_text='Minimum stock level before reordering')),
                ('reorder_quantity', models.PositiveIntegerField(default=50, help_text='Quantity to order when restocking')),
                ('max_stock_level', models.PositiveIntegerField(default=1000, help_text='Maximum stock level to maintain')),
                ('economic_order_quantity', models.IntegerField(default=50, help_text='Calculated EOQ for optimal ordering')),
                ('supplier_sku', models.CharField(blank=True, max_length=100)),
                ('supplier_lead_time_days', models.IntegerField(default=30, help_text='Lead time for this specific product')),
                ('supplier_minimum_order_quantity', models.IntegerField(default=1, help_text='MOQ from supplier')),
                ('supplier_price_breaks', models.JSONField(blank=True, default=list, help_text="Price breaks: [{'quantity': 100, 'price': 1.50}, {'quantity': 500, 'price': 1.25}]")),
                ('quality_grade', models.CharField(choices=[('consumer', 'Consumer Grade'), ('industrial', 'Industrial Grade'), ('automotive', 'Automotive Grade'), ('military', 'Military Grade'), ('space', 'Space Grade')], default='consumer', max_length=20)),
                ('certifications', models.JSONField(blank=True, default=list, help_text="Certifications: ['CE', 'FCC', 'SABS', 'RoHS']")),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_hazardous', models.BooleanField(default=False, help_text='Requires special handling/shipping')),
                ('requires_esd_protection', models.BooleanField(default=False, help_text='Requires ESD protection')),
                ('is_temperature_sensitive', models.BooleanField(default=False, help_text='Requires temperature-controlled storage')),
                ('is_serialized', models.BooleanField(default=False, help_text='Track individual serial numbers for this product')),
                ('requires_quality_check', models.BooleanField(default=False, help_text='Requires quality inspection before sale')),
                ('total_sold', models.PositiveIntegerField(default=0, help_text='Total quantity sold to date')),
                ('total_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total revenue generated from this product', max_digits=20)),
                ('last_sold_date', models.DateTimeField(blank=True, null=True)),
                ('last_restocked_date', models.DateTimeField(blank=True, null=True)),
                ('last_cost_update', models.DateTimeField(auto_now=True)),
                ('meta_title', models.CharField(blank=True, max_length=200)),
                ('meta_description', models.CharField(blank=True, max_length=500)),
                ('search_keywords', models.TextField(blank=True, help_text='Comma-separated keywords')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_quotable', models.BooleanField(default=True, help_text='Can this product be included in quotes?')),
                ('quote_description', models.TextField(blank=True, help_text='Description to use in quotes (if different from main description)')),
                ('minimum_quote_quantity', models.IntegerField(default=1, help_text='Minimum quantity for quotes')),
                ('bulk_discount_threshold', models.IntegerField(default=10, help_text='Quantity threshold for bulk pricing')),
                ('bulk_discount_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Discount percentage for bulk orders', max_digits=5)),
                ('brand', models.ForeignKey(help_text='Product brand', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='inventory.brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='inventory.category')),
                ('component_family', models.ForeignKey(blank=True, help_text='Component family (auto-filled from category)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='products', to='inventory.componentfamily')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('selling_currency', models.ForeignKey(help_text='Currency for selling price', on_delete=django.db.models.deletion.PROTECT, related_name='products_selling', to='inventory.currency')),
                ('supplier_currency', models.ForeignKey(help_text='Currency of cost price', on_delete=django.db.models.deletion.PROTECT, related_name='products_cost', to='inventory.currency')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('po_number', models.CharField(max_length=50, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sent', 'Sent to Supplier'), ('acknowledged', 'Acknowledged by Supplier'), ('partially_received', 'Partially Received'), ('received', 'Fully Received'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('expected_delivery_date', models.DateField()),
                ('actual_delivery_date', models.DateField(blank=True, null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('delivery_instructions', models.TextField(blank=True)),
                ('payment_terms', models.CharField(max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('delivery_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.location')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockTake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('scheduled_date', models.DateTimeField()),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('items_counted', models.PositiveIntegerField(default=0)),
                ('variances_found', models.PositiveIntegerField(default=0)),
                ('total_adjustment_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('notes', models.TextField(blank=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_stock_takes', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, help_text='Leave blank for full inventory count', null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.location')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StorageBin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bin_code', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('row', models.CharField(blank=True, max_length=10)),
                ('column', models.CharField(blank=True, max_length=10)),
                ('shelf', models.CharField(blank=True, max_length=10)),
                ('max_capacity_items', models.PositiveIntegerField(blank=True, help_text='Maximum number of items this bin can hold', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('requires_special_handling', models.BooleanField(default=False, help_text='Requires special handling (ESD, temperature control, etc.)')),
                ('notes', models.TextField(blank=True)),
                ('component_families', models.ManyToManyField(blank=True, help_text='Component families typically stored in this bin', to='inventory.componentfamily')),
            ],
            options={
                'ordering': ['location', 'bin_code'],
            },
        ),
        migrations.AddField(
            model_name='category',
            name='preferred_storage_bins',
            field=models.ManyToManyField(blank=True, help_text='Preferred storage bins for this category', to='inventory.storagebin'),
        ),
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('location_type', models.CharField(choices=[('warehouse', 'Warehouse'), ('store', 'Physical Store'), ('combined', 'Warehouse + Store'), ('supplier', 'Supplier Location'), ('transit', 'In Transit')], max_length=20)),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(default='Zimbabwe', max_length=100)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('max_capacity_cubic_meters', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum storage capacity in cubic meters', max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False, help_text='Default location for new stock')),
                ('allows_sales', models.BooleanField(default=True, help_text='Can sell from this location')),
                ('allows_receiving', models.BooleanField(default=True, help_text='Can receive stock at this location')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='storagebin',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage_bins', to='inventory.storagelocation'),
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('supplier_code', models.CharField(max_length=50, unique=True)),
                ('supplier_type', models.CharField(choices=[('manufacturer', 'Manufacturer'), ('distributor', 'Distributor'), ('wholesaler', 'Wholesaler'), ('local_retailer', 'Local Retailer'), ('import_agent', 'Import Agent')], max_length=20)),
                ('website', models.URLField(blank=True)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('whatsapp', models.CharField(blank=True, max_length=20)),
                ('address_line_1', models.CharField(max_length=200)),
                ('address_line_2', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('state_province', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('payment_terms', models.CharField(default='30 days', help_text="e.g., '30 days', 'NET 30', 'COD', 'T/T in advance'", max_length=100)),
                ('minimum_order_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Minimum order value', max_digits=10)),
                ('typical_lead_time_days', models.PositiveIntegerField(default=30, help_text='Typical lead time from order to delivery')),
                ('shipping_methods', models.JSONField(default=list, help_text="Available shipping methods: ['air', 'sea', 'express', 'land']")),
                ('preferred_shipping_method', models.CharField(choices=[('air', 'Air Freight'), ('sea', 'Sea Freight'), ('express', 'Express Courier'), ('land', 'Land Transport')], default='air', max_length=20)),
                ('average_lead_time_days', models.PositiveIntegerField(default=30, help_text='Average delivery time in days')),
                ('reliability_rating', models.DecimalField(decimal_places=2, default=Decimal('5.00'), help_text='Reliability rating from 1-10', max_digits=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('rating', models.PositiveSmallIntegerField(default=5, help_text='Supplier rating (1-5 stars)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('on_time_delivery_rate', models.DecimalField(decimal_places=2, default=Decimal('95.00'), help_text='Percentage of on-time deliveries', max_digits=5)),
                ('quality_score', models.DecimalField(decimal_places=2, default=Decimal('95.00'), help_text='Quality score percentage', max_digits=5)),
                ('supports_dropshipping', models.BooleanField(default=False)),
                ('provides_technical_support', models.BooleanField(default=False)),
                ('has_local_representative', models.BooleanField(default=False)),
                ('accepts_returns', models.BooleanField(default=True)),
                ('return_policy_days', models.PositiveIntegerField(default=30, help_text='Return policy period in days')),
                ('tax_number', models.CharField(blank=True, max_length=50)),
                ('requires_purchase_order', models.BooleanField(default=True, help_text='Whether this supplier requires formal POs')),
                ('is_active', models.BooleanField(default=True)),
                ('is_preferred', models.BooleanField(default=False, help_text='Mark as preferred supplier for priority in sourcing')),
                ('preferred_contact_method', models.CharField(choices=[('email', 'Email'), ('whatsapp', 'WhatsApp'), ('phone', 'Phone'), ('website', 'Website Portal')], default='email', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(help_text="Supplier's preferred currency", on_delete=django.db.models.deletion.PROTECT, to='inventory.currency')),
                ('country', models.ForeignKey(help_text='Country where supplier is located', on_delete=django.db.models.deletion.PROTECT, to='inventory.suppliercountry')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ReorderAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('critical', 'Critical')], max_length=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('ordered', 'Purchase Order Created'), ('resolved', 'Resolved'), ('ignored', 'Ignored')], default='active', max_length=15)),
                ('current_stock', models.IntegerField()),
                ('reorder_level', models.IntegerField()),
                ('suggested_order_quantity', models.IntegerField()),
                ('estimated_stockout_date', models.DateField(blank=True, null=True)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reorder_alerts', to='inventory.product')),
                ('purchase_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.purchaseorder')),
                ('suggested_supplier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.supplier')),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.supplier'),
        ),
        migrations.AddField(
            model_name='product',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='inventory.supplier'),
        ),
        migrations.CreateModel(
            name='OverheadFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('calculation_type', models.CharField(choices=[('fixed_per_item', 'Fixed Amount Per Item'), ('percentage_of_cost', 'Percentage of Product Cost'), ('percentage_of_order', 'Percentage of Order Value'), ('fixed_per_order', 'Fixed Amount Per Order'), ('percentage_of_weight', 'Percentage Based on Weight')], max_length=20)),
                ('fixed_amount', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Fixed amount (per item or per order)', max_digits=10)),
                ('percentage_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Percentage rate (0-100)', max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('applies_to_categories', models.ManyToManyField(blank=True, help_text='Leave empty to apply to all categories', to='inventory.category')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('applies_to_suppliers', models.ManyToManyField(blank=True, help_text='Leave empty to apply to all suppliers', to='inventory.supplier')),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductAttributeDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('field_type', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('decimal', 'Decimal'), ('choice', 'Choice List'), ('boolean', 'Yes/No'), ('url', 'URL'), ('email', 'Email')], max_length=10)),
                ('is_required', models.BooleanField(default=False)),
                ('default_value', models.CharField(blank=True, max_length=200)),
                ('help_text', models.CharField(blank=True, max_length=200)),
                ('choice_options', models.JSONField(blank=True, default=list, help_text="For choice fields: ['Option1', 'Option2', 'Option3']")),
                ('min_value', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('max_value', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('validation_pattern', models.CharField(blank=True, help_text='Regex pattern for validation', max_length=200)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('show_in_listings', models.BooleanField(default=False, help_text='Show in product listings')),
                ('show_in_search', models.BooleanField(default=False, help_text='Include in search')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('component_families', models.ManyToManyField(help_text='Component families that use this attribute', related_name='attribute_definitions', to='inventory.componentfamily')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['display_order', 'name'],
                'unique_together': {('name', 'field_type')},
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_ordered', models.PositiveIntegerField()),
                ('quantity_received', models.PositiveIntegerField(default=0)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('expected_delivery_date', models.DateField(blank=True, null=True)),
                ('actual_delivery_date', models.DateField(blank=True, null=True)),
                ('quality_check_passed', models.BooleanField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.product')),
                ('purchase_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.purchaseorder')),
            ],
            options={
                'unique_together': {('purchase_order', 'product')},
            },
        ),
        migrations.CreateModel(
            name='StockLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=0)),
                ('reserved_quantity', models.IntegerField(default=0)),
                ('last_counted', models.DateTimeField(blank=True, null=True)),
                ('last_movement', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_levels', to='inventory.location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_levels', to='inventory.product')),
            ],
            options={
                'ordering': ['product__name', 'location__name'],
                'unique_together': {('product', 'location')},
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_type', models.CharField(choices=[('in', 'Stock In'), ('out', 'Stock Out'), ('adjustment', 'Stock Adjustment'), ('transfer', 'Location Transfer'), ('sale', 'Sale'), ('purchase', 'Purchase'), ('return', 'Return'), ('damaged', 'Damaged Stock'), ('expired', 'Expired Stock'), ('sample', 'Sample/Demo')], max_length=20)),
                ('quantity', models.IntegerField()),
                ('previous_stock', models.IntegerField()),
                ('new_stock', models.IntegerField()),
                ('reference', models.CharField(help_text='Reference number (PO, Invoice, Transfer, etc.)', max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('from_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements_from', to='inventory.location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='inventory.product')),
                ('to_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements_to', to='inventory.location')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['product', '-created_at'], name='inventory_s_product_cfb4fb_idx'), models.Index(fields=['movement_type', '-created_at'], name='inventory_s_movemen_a71f62_idx'), models.Index(fields=['reference'], name='inventory_s_referen_16defd_idx')],
            },
        ),
        migrations.CreateModel(
            name='StockTakeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_quantity', models.IntegerField()),
                ('counted_quantity', models.IntegerField()),
                ('variance', models.IntegerField()),
                ('variance_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('counted_at', models.DateTimeField(auto_now_add=True)),
                ('counted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.product')),
                ('stock_take', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.stocktake')),
            ],
            options={
                'unique_together': {('stock_take', 'product', 'location')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='storagebin',
            unique_together={('location', 'bin_code')},
        ),
        migrations.CreateModel(
            name='ProductStockLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_on_hand', models.IntegerField(default=0)),
                ('quantity_reserved', models.IntegerField(default=0)),
                ('quantity_on_order', models.IntegerField(default=0)),
                ('last_movement_date', models.DateTimeField(blank=True, null=True)),
                ('last_count_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('last_count_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bin_stock_levels', to='inventory.product')),
                ('storage_bin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_levels', to='inventory.storagebin')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.storagelocation')),
            ],
            options={
                'ordering': ['product', 'location'],
                'unique_together': {('product', 'location')},
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='inventory_p_sku_f85905_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['barcode'], name='inventory_p_barcode_3a77e5_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['qr_code'], name='inventory_p_qr_code_868dfc_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'is_active'], name='inventory_p_categor_471092_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['supplier', 'is_active'], name='inventory_p_supplie_23b4c3_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['brand', 'is_active'], name='inventory_p_brand_i_42cb86_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['component_family', 'is_active'], name='inventory_p_compone_2de205_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['total_stock'], name='inventory_p_total_s_4ccd12_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['reorder_level'], name='inventory_p_reorder_0bda26_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['manufacturer_part_number'], name='inventory_p_manufac_f7757b_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['supplier_sku'], name='inventory_p_supplie_68ed65_idx'),
        ),
    ]
